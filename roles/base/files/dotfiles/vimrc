set nocompatible
filetype off

"""
""" hidden, for ctrl-space
"""
set hidden


"""
""" vundle
"""
let vundleInstalled=0
if !isdirectory(expand("~/.vim/bundle/Vundle.vim/.git"))
    echo "Installing Vundle"
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/Vundle.vim ~/.vim/bundle/Vundle.vim
    let vundleInstalled=1
endif
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

Plugin 'szw/vim-ctrlspace'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-markdown'
Plugin 'Raimondi/delimitMate'
Plugin 'mileszs/ack.vim'
Plugin 'vim-scripts/JSON.vim'
Plugin 'Lokaltog/vim-powerline'
Plugin 'gregsexton/MatchTag'
Plugin 'scrooloose/syntastic'
Plugin 'jnurmine/Zenburn'
Plugin 'scrooloose/nerdtree'
Plugin 'ciaranm/detectindent'
Plugin 'klen/python-mode'
Plugin 'fatih/vim-go'

call vundle#end()

if vundleInstalled == 1
    echo "Installing Vundle plugins"
    echo ""
    PluginInstall
endif

"""
""" Key mappings
"""
" esc-esc in normal mode to clear search highlight
nnoremap <ESC><ESC> :noh<CR>
" bind F2 to toggle paste mode
set pastetoggle=<F2>
" toggle line numberings with F3
nnoremap <F3> :set number!<CR>
" copy and paste to system clipboard
noremap <A-y> "+y
noremap <A-p> "+p
noremap <A-P> "+P
" make F5 save and execute script
"   on unix: based off of its shebang line
"   on windows: by opening it (works for .py etc)
if has("unix")
    nnoremap <F5> :exe("if match(getline(1),'^\#!')==0\nw\|exe('!'.getline(1)[2:].' %')\nen")<CR>
elseif has("win32")
    nnoremap <F5> :w\|!%<CR>
endif
nnoremap <silent><C-p> :CtrlSpace O<CR>



"""
""" Behaviour
"""
" normal backspace
set backspace=indent,eol,start
" mouse support
if exists('+mouse')
    set mouse=a
endif
" regex magic
set magic
" use incremental search
set incsearch
" quickly move cursor to matching bracket when added
set showmatch


"""
""" Appearance
"""
" 256 colors
set t_Co=256
" Syntax hilighting
syn on
" more syntax for python
let python_highlight_all = 1
" hilight search results
set hlsearch
" set terminal title
set title
" always show status line (for vim-powerline)
set laststatus=2
" don't show mode (shown in vim-powerline)
set noshowmode
" Zenburrnn
colors zenburn
" highlight current line
set cursorline
" highlight last column
if exists('+colorcolumn')
  set colorcolumn=+1
endif


"""
""" File Options
"""
" full filetype detection
filetype plugin indent on
" use real tabs for makefiles
autocmd BufNewFile,BufReadPost Makefile,makefile,*.mk setlocal noexpandtab
" detect json files
autocmd BufNewFile,BufReadPost *.json setlocal ft=json
" detect markdown files
autocmd BufNewFile,BufReadPost *.md setlocal filetype=markdown
" use modelines
set modeline


"""
""" Text style options
"""
" 4 space tabs 
set tabstop=4
set shiftwidth=4
set expandtab
" disable mixing spaces and \t
set softtabstop=0
" set wrapping text width
set textwidth=79


"""
""" Misc.
"""
set encoding=utf-8
" add custom spellings
if exists('+spellfile')
    set spellfile=~/.vim/spellfile.add
endif


"""
""" gui options
"""
if has("gui_running")
    " get rid of fluff (menu & toolbar)
    set guioptions-=m
    set guioptions-=T
endif
" set fonts
set guifont=Hack


" auto detect indent type
autocmd BufReadPost * :DetectIndent
" prefer spaces
let g:detectindent_preferred_expandtab = 1
" use 4 spaces
let g:detectindent_preferred_indent = 4

""" Python
" ignore pyc
set wildignore+=*.pyc
let NERDTreeIgnore = ['\.pyc$']



"""
""" ENV customization
"""
set cdpath=,~/code


"""
""" disable some pymode defaults
"""
let g:pymode_options=0
let g:pymode_lint_cwindow=0
let g:pymode_rope_completion=0
let g:pymode_rope=0
" all folds open by default
set foldlevel=99

"""
""" NeoVim options for moving when in a :terminal
"""
if has("nvim")
  tnoremap <Esc><Esc> <C-\><C-n>
endif
