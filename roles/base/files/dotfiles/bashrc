# vim: tw=0

# do nothing for noninteractive environments
#[ -z "$PS1" ] && return
[[ $- != *i* ]] && return


###choose editor
if type -P vim &> /dev/null; then
    export EDITOR=vim
elif type -P vi &> /dev/null; then
    export EDITOR=vi
else
    echo 'Vi/Vim not found, EDITOR not set'
fi

###choose pager
if type -P less &> /dev/null; then
    export PAGER=less
else
    export PAGER=more
fi

###ubuntu calls ack ack-grep
if type -P ack-grep &> /dev/null; then
    alias ack=ack-grep
fi

#### gnome 256 colors
if [ "$COLORTERM" == "gnome-terminal" ]; then
    export TERM="xterm-256color"
fi


#### Vi mode & emacs-style clear
set -o vi
bind -m vi-insert "\C-l":clear-screen

#### bash4 ** support
bash --version | grep 'version 4' && shopt -s globstar

# bash completion
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi


#for ls:
type -p dircolors > /dev/null && eval $(dircolors -b)


#date utilities
alias today='date +%F'
alias now="date +%FT%T"

#.env utility
alias dotenv='eval $(sed -e "s/^/export /" .env|tr "\n" ";")'

#default behaviours
alias grep='grep --color=auto'
alias df='df -h'
if ls --version 2> /dev/null | grep GNU > /dev/null; then
    alias ls='ls --indicator-style=slash --human-readable --ignore-backups --color=auto --time-style=long-iso'
else
    alias ls='ls -p -h -G'
fi

#common mistakes
alias cd..='cd ..'

#short cuts
alias ll='ls -l'
alias la='ls -la'

if [ $(type -p dtrx) ]; then
    alias x=dtrx
else
    alias x='tar xvf'
fi

# simple way to do reverse ssh tunnels
function rssh-proxy () {
    host=${2%:*}
    rport=${2#*:}
    ssh -R 0.0.0.0:$rport:127.0.0.1:$1 $host "echo tunnel available at $2&&cat"
}

# simple nvim session loader
function snvim () {
    nvim -S ~/.vim/sessions/$1.vim
}

# node's shell is the fucking worst.
if type -p rlwrap &> /dev/null ; then
    alias node='env NODE_NO_READLINE=1 rlwrap node'
fi


if [ -f ~/.bashrc.local_ext ]; then
    . ~/.bashrc.local_ext
fi

if [ -f ~/.bashrc.$HOSTNAME ]; then
    . ~/.bashrc.$HOSTNAME
fi

if [ -f /usr/bin/virtualenvwrapper.sh ]; then
    . /usr/bin/virtualenvwrapper.sh
fi

if [ -f ~/.nvm/nvm.sh ]; then
    . ~/.nvm/nvm.sh
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

PATH=$PATH:~/.local/bin:~/Library/Python/3.8/bin

export CDPATH=$HOME/code

HISTSIZE=9000
HISTFILESIZE=$HISTSIZE
HISTCONTROL=ignorespace:ignoredups


function dschep_prompt_command {
    PROMPT_ERROR=$?
    if [ "$PROMPT_ERROR" -ne "0" ]; then
        PROMPT_ERROR=" $PROMPT_ERROR"
    else
        PROMPT_ERROR=
    fi
    echo -ne "\033]0;$USER@$HOSTNAME:${PWD/#$HOME/\~}\007" # set terminal title
    PROMPT_BRANCH="$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')" 
    if ! [ "$PROMPT_BRANCH" == "" ]; then
        PROMPT_BRANCH=" $PROMPT_BRANCH"
        if !  git status 2>&1| grep -e "modified:" -e  "Your branch is ahead of" -e "new file:"  -e "rename:" -e "deleted" &> /dev/null; then
            PROMPT_BRANCH_COLOR=$(tput setaf 2)
        else
            PROMPT_BRANCH_COLOR=$(tput setaf 5)
        fi
    fi
    if [ -z "$ASSUMED_ROLE" ]; then
        PROMPT_AWS_ROLE_COLOR=
        PROMPT_AWS_ROLE=''
    else
        PROMPT_AWS_ROLE_COLOR=$(tput setaf 3)
        PROMPT_AWS_ROLE=" ($ASSUMED_ROLE)"
    fi

}
if ! [ "$SSH" == "" ] || [ "$(id -u)" -eq 0 ] || grep docker /proc/1/cgroup &> /dev/null ; then
    PROMPT_USERHOST='\u@\h'
fi
PROMPT_COMMAND='dschep_prompt_command;'
PS1="[\[$(tput sgr0;[ "$(id -u)" -eq 0 ] && tput setaf 1 || tput setaf 2)\]$PROMPT_USERHOST:\[$(tput sgr0;tput bold)\]\W\[$(tput sgr0)\]]\
\[\$PROMPT_BRANCH_COLOR\]\$PROMPT_BRANCH\
\[\$PROMPT_AWS_ROLE_COLOR\]\$PROMPT_AWS_ROLE\
\[$(tput setaf 5)\]\$PROMPT_ERROR\
\[$(tput sgr0)\] \[$(tput bold)\]\\$\\[$(tput sgr0)\] "


if type -p direnv &> /dev/null ; then
    eval "$(direnv hook bash)"
fi
#if type -p ntfy &> /dev/null ; then
#    eval "$(ntfy shell-integration)"
#fi

# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[ -f /home/dschep/code/ui/api/node_modules/tabtab/.completions/serverless.bash ] && . /home/dschep/code/ui/api/node_modules/tabtab/.completions/serverless.bash
# tabtab source for sls package
# uninstall by removing these lines or running `tabtab uninstall sls`
[ -f /home/dschep/code/ui/api/node_modules/tabtab/.completions/sls.bash ] && . /home/dschep/code/ui/api/node_modules/tabtab/.completions/sls.bash

if type -p thefuck &> /dev/null ; then
    eval $(thefuck --alias)
fi

if type -p assume-role &> /dev/null ; then
    assume-role-shell () {
        (eval $($(which assume-role) $1); bash)
    }
fi
